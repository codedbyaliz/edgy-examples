<blocks app="Snap! 4.0, http://snap.berkeley.edu" version="1"><block-definition s="is %&apos;start&apos; connected to %&apos;end&apos; BFS graphical" type="predicate" category="network"><header></header><code></code><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>node queue</l><l>current</l></list></block><block s="doSetVar"><l>node queue</l><block s="reportNewQueue"><list></list></block><comment w="90" collapsed="false">Initialise empty queue and color of all nodes to white..</comment></block><block s="doForEach"><l>node</l><block s="getNodes"></block><script><block s="setNodeAttrib"><l>color</l><block var="node"/><l>white</l></block></script></block><block s="pushQueue"><block var="start"/><block var="node queue"/><comment w="90" collapsed="false">Start with the initial node on the queue.</comment></block><block s="doUntil"><block s="isQueueEmpty"><block var="node queue"/></block><script><block s="doWait"><l>1</l></block><block s="doSetVar"><l>current</l><block s="reportQueueTop"><block var="node queue"/></block><comment w="90" collapsed="false">Take the top node off the queue</comment></block><block s="popQueue"><block var="node queue"/></block><block s="setNodeAttrib"><l>color</l><block var="current"/><l>#FF5555</l></block><block s="doIf"><block s="reportEquals"><block var="current"/><block var="end"/><comment w="90" collapsed="false">If end node is found, return true</comment></block><script><block s="doReport"><block s="reportTrue"></block></block></script></block><block s="doForEach"><l>neighbour</l><block s="getNeighbors"><block var="current"/></block><script><block s="doIf"><block s="reportEquals"><block s="getNodeAttrib"><l>color</l><block var="neighbour"/></block><l>white</l></block><script><block s="pushQueue"><block var="neighbour"/><block var="node queue"/></block><block s="setNodeAttrib"><l>color</l><block var="neighbour"/><l>#FFAAAA</l></block></script></block></script><comment w="90" collapsed="false">Otherwise, add previously unseen neighbours to the queue.</comment></block></script></block><block s="doReport"><block s="reportFalse"></block><comment w="90" collapsed="false">If queue is empty before we find the end then start and end are not connected.</comment></block></script><password></password><salt></salt></block-definition><block-definition s="is %&apos;start&apos; connected to %&apos;end&apos; DFS graphical" type="predicate" category="network"><header></header><code></code><inputs><input type="%s"></input><input type="%s"></input></inputs><script><block s="doDeclareVariables"><list><l>node stack</l><l>current</l></list></block><block s="doSetVar"><l>node stack</l><block s="reportNewStack"><list></list></block><comment w="90" collapsed="false">Initialise empty stack and color of all nodes to white..</comment></block><block s="doForEach"><l>node</l><block s="getNodes"></block><script><block s="setNodeAttrib"><l>color</l><block var="node"/><l>white</l></block></script></block><block s="pushStack"><block var="start"/><block var="node stack"/><comment w="90" collapsed="false">Start with the initial node on the stack.</comment></block><block s="doUntil"><block s="isStackEmpty"><block var="node stack"/></block><script><block s="doWait"><l>1</l></block><block s="doSetVar"><l>current</l><block s="reportStackTop"><block var="node stack"/></block><comment w="90" collapsed="false">Take top node off stack</comment></block><block s="popStack"><block var="node stack"/></block><block s="setNodeAttrib"><l>color</l><block var="current"/><l>#FF5555</l></block><block s="doIf"><block s="reportEquals"><block var="current"/><block var="end"/></block><script><block s="doReport"><block s="reportTrue"></block></block></script><comment w="90" collapsed="false">If end node is found, return true</comment></block><block s="doForEach"><l>neighbour</l><block s="getNeighbors"><block var="current"/></block><script><block s="doIf"><block s="reportEquals"><block s="getNodeAttrib"><l>color</l><block var="neighbour"/></block><l>white</l></block><script><block s="pushStack"><block var="neighbour"/><block var="node stack"/></block><block s="setNodeAttrib"><l>color</l><block var="neighbour"/><l>#FFAAAA</l></block></script></block></script><comment w="90" collapsed="false">Add any previously unseen neighbours to the stack..</comment></block></script></block><block s="doReport"><block s="reportFalse"></block><comment w="90" collapsed="false">If stack is empty before we find the end then start and end are not connected.</comment></block></script><password></password><salt></salt></block-definition></blocks>